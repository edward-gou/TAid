package com.hash.core;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;

import android.content.Context;

import com.thoughtworks.xstream.XStream;

public class FileManager {
	
	public FileManager()
	{
		
	}
	/**
	 * takes a StudentBank, CourseList and Context and saves 
	 * the StudentBank and CourseList as an xml.
	 * @param sbank
	 * @param clist
	 * @param c
	 */
	public void save(StudentBank sbank, CourseList clist, User user, Context c)
	{
		FileOutputStream outputStream;
		XStream xs = new XStream();
		String sbankxml = xs.toXML(sbank);
		String clistxml = xs.toXML(clist);
		String userxml = xs.toXML(user);
		
		//Writes to file
		try 
		{
			outputStream = c.openFileOutput("StudentBank.xml", Context.MODE_PRIVATE);
			outputStream.write(sbankxml.getBytes());
			outputStream.close();

			outputStream = c.openFileOutput("CourseList.xml", Context.MODE_PRIVATE);
			outputStream.write(clistxml.getBytes());
			outputStream.close();
			
			outputStream = c.openFileOutput("User.xml", Context.MODE_PRIVATE);
			outputStream.write(userxml.getBytes());
			outputStream.close();
		//Error checking
		} catch (FileNotFoundException e) 
		{
			e.printStackTrace();
		} catch (IOException e) 
		{
			e.printStackTrace();
		}
		
	}
	/**
	 * Takes a Context and loads the studentbank xml and courselist xml.
	 * Returns the two xml files as a string in a string array
	 * @param c
	 * @return
	 */
	public String[] load(Context c)
	{
		FileInputStream inputStream;
		
		String studentBankXml = null;
		String courseListXml = null;
		String userXml = null;
		try {
			//Toast.makeText(c, "loading", Toast.LENGTH_LONG).show();
			inputStream = c.openFileInput("StudentBank.xml");
			byte[] studentBankArray = new byte[inputStream.available()];
			//Reads to the end of file and puts it into the student bank string
			while(inputStream.read(studentBankArray) != -1)
			{
				studentBankXml = new String(studentBankArray);
			}
			inputStream = c.openFileInput("CourseList.xml");
			byte[] courseListArray = new byte[inputStream.available()];
			//Reads to the end of file and puts it into the course list string
			while(inputStream.read(courseListArray) != -1)
			{
				courseListXml = new String(courseListArray);
			}	

			inputStream = c.openFileInput("User.xml");
			byte[] userArray = new byte[inputStream.available()];
			while(inputStream.read(userArray) != -1)
			{
				userXml = new String(userArray);
			}
		//Error checking
		} catch (FileNotFoundException e) 
		{
			e.printStackTrace();
			return null;
		} catch (IOException e) 
		{
			e.printStackTrace();
			return null;
		}
		String[] xml = new String[3];
		xml[0] = studentBankXml;
		xml[1] = courseListXml;
		xml[2] = userXml;
		return xml;
	}
	
	/**
	 * Takes a string that is the DCS grade file and returns an Object array containing
	 * the Assignments, CalculatedMarks, and StudentBank generated by the file
	 * @param s
	 * @return (ArrayList<Assignment>, ArrayList<CalculatedMark>, StudentBank)
	 */
	public Object[] importDCS(String s)
	{
		//Temp data for assignments
		ArrayList<Assignment> Assignments = new ArrayList<Assignment>();
		Assignment a;
		
		//Temp data for calculated marks
		ArrayList<CalculatedMark> CalculatedMarks = new ArrayList<CalculatedMark>();
		ArrayList<String> marks = new ArrayList<String>();
		ArrayList<Integer> weights = new ArrayList<Integer>();
		CalculatedMark cm;
		
		//Temp data for students
		StudentBank sb = new StudentBank();
		int stuNum;
		boolean dropped;
		boolean flagged;
		String word;
		int mark;
		int j;
		
		//initialize
		String n;
		int m;
		String[] lines = s.split("\\r?\\n");
		int i = 0;
		
		//Parse Assignments
		while (lines[i].contains("/") || lines[i].startsWith("*"))
		{
			lines[i] = lines[i].trim();
			if (lines[i].startsWith("*"))
			{
			}
			else
			{
				n = lines[i].substring(0, lines[i].indexOf(" / "));
				if (lines[i].contains("*"))
				{
					m = Integer.parseInt(lines[i].substring(lines[i].indexOf(" / ") + 3, lines[i].indexOf(" *")));
				}
				else
				{
					m = Integer.parseInt(lines[i].substring(lines[i].indexOf(" / ") + 3));
				}
				a = new Assignment(n, m, false);
				Assignments.add(a);
			}
			i++;
		}
		
		//Parse CalculatedMarks
		while (lines[i].contains("=") || lines[i].startsWith("*"))
		{
			lines[i] = lines[i].trim();
			if (lines[i].startsWith("*"))
			{
			}
			else
			{
				marks = new ArrayList<String>();
				weights = new ArrayList<Integer>();
				n = lines[i].substring(0, lines[i].indexOf(" = "));
				lines[i] = lines[i].substring(lines[i].indexOf(" = ") + 3);
				while (lines[i].contains(" : ") && !lines[i].startsWith("*"))
				{
					if (findAssignment(Assignments, lines[i].substring(0, lines[i].indexOf(" : "))) != null)
					{
						marks.add(findAssignment(Assignments, lines[i].substring(0, lines[i].indexOf(" : "))).getName());
					}
					else if (findCalculatedMark(CalculatedMarks, lines[i].substring(0, lines[i].indexOf(" : "))) != null)
					{
						marks.add(findCalculatedMark(CalculatedMarks, lines[i].substring(0, lines[i].indexOf(" : "))).getName());
					}
					lines[i] = lines[i].substring(lines[i].indexOf(" : ") + 3);
					if (lines[i].indexOf(" ") == -1)
					{
						weights.add(Integer.parseInt(lines[i].trim().substring(0)));
					}
					else
					{
						weights.add(Integer.parseInt(lines[i].trim().substring(0, lines[i].indexOf(" "))));
					}
					if (lines[i].indexOf(" ") != -1)
					{
						lines[i] = lines[i].substring(lines[i].indexOf(" ") + 1);
					}
				}
				cm = new CalculatedMark(n, marks, weights);
				CalculatedMarks.add(cm);
			}
			i++;
		}
		
		i++; //For the empty line between head and body
		
		//Parsing the body/students
		lines[i] = lines[i].trim();
		while (i < lines.length && !lines[i].isEmpty())
		{
			if (lines[i].startsWith("*"))
			{
				
			}
			else
			{
				//parse student num
				stuNum = -1;
				word = parseFirstWord(lines[i]);
				if (word != null)
				{
					stuNum = Integer.parseInt(word);
				}
				
				//parse dropped and flagged
				dropped = false;
				flagged = false;
				lines[i] = lines[i].trim().substring(word.length());
				word = lines[i].substring(1, 3);
				if (word != null)
				{
					if (word.contains("d"))
					{
						dropped = true;
					}	
					if (word.contains("x"))
					{
						flagged = true;
					}
				}
				
				//parse name
				n = null;
				lines[i] = lines[i].substring(4);
				word = parseFirstWord(lines[i]);
				if (word != null)
				{
					n = word;
				}
				j = 0;
				mark = -2;
				
				//parse marks
				while (j < Assignments.size())
				{
					mark = -2;
					lines[i] = lines[i].trim().substring(word.length());
					word = parseFirstWord(lines[i]);
					if (word != null && word.matches("\\-?[0-9]+"))
					{
						mark = Integer.parseInt(word);
						Assignments.get(j).addEntry(stuNum);
						Assignments.get(j).setIndivMark(stuNum, mark);
						j++;
					}
					else if(word == null)
					{
						j = Assignments.size();
					}
				}
				if (mark != -2)
				{
					sb.addStudent(new Student(n, stuNum, dropped, flagged));
				}
			}
			i++;
		}
		Object[] r = new Object[3];
		r[0] = Assignments;
		r[1] = CalculatedMarks;
		r[2] = sb;
		return r;
	}
	
	private Assignment findAssignment(ArrayList<Assignment> a, String n)
	{
		int i = 0;
		while (i < a.size())
		{
			if (a.get(i).getName().equals(n))
			{
				return a.get(i);
			}
			else
			{
				i++;
			}
		}
		return null;
	}
	
	private CalculatedMark findCalculatedMark(ArrayList<CalculatedMark> a, String n)
	{
		int i = 0;
		while (i < a.size())
		{
			if (a.get(i).getName().equals(n))
			{
				return a.get(i);
			}
			else
			{
				i++;
			}
		}
		return null;
	}
	
	private String parseFirstWord(String s)
	{
		s = s.trim();
		if (s.isEmpty() || s.startsWith("*"))
		{
			return null;
		}
		String out = "";
		int i = 0;
		while (i < s.length() && (s.charAt(i) != '*' && s.charAt(i) != ' ' && s.charAt(i) != '\t'))
		{
			out += s.charAt(i);
			i++;
		}
		return out;
	}
	
	public String exportDCS(ArrayList<Assignment> a, ArrayList<CalculatedMark> cm, StudentBank sb)
	{
		String DCS = "";
		String line = "";
		//Assignments
		for (int i = 0; i < a.size(); i++)
		{
			line += a.get(i).getName();
			line += " / ";
			line += a.get(i).getMaxMark();
			line += "\n";
			DCS += line;
			line = "";
		}
		//CalculatedMarks
		for (int i = 0; i < cm.size(); i++)
		{
			line += cm.get(i).getName() + " =";
			for (int k = 0; k < cm.get(i).getMarks().size(); k++)
			{
				line += " ";
				line += cm.get(i).getMarks().get(k) + " : ";
				line += cm.get(i).getWeights().get(k);
			}
			line += "\n";
			DCS += line;
			line = "";
		}
		DCS += "\n";
		//Body
		for (int i = 0; i < sb.getSize(); i++)
		{
			line += sb.students.valueAt(i).getStudentNum() + " ";
			if (sb.students.valueAt(i).isDropped())
			{
				line += "d";
			}
			else
			{
				line += " ";
			}if (sb.students.valueAt(i).isFlagged())
			{
				line += "x";
			}
			else
			{
				line += " ";
			}
			line += " ";
			line += sb.students.valueAt(i).getName();
			for (int k = 0; k < a.size(); k++)
			{
				line += "\t";
				line += a.get(k).getMark(sb.students.valueAt(i).getStudentNum()).getMark();
			}
			line += "\n";
			DCS += line;
			line = "";
		}
		
		return DCS;
	}

}

